-What happens when you initialize a repository? Why do you need to do it?

Init seems to setup the filesystem framework that git needs to be able to handle future commits and actions on the repository.

-How is the staging area different from the working directory and the repository? What value do you think it offers?

It gives a overview of the content for the next commit. It helps to minimize the amount of files in a commit. 

-How can you use the staging area to make sure you have one commit per logical change?

That can be done by adding a file and then making a commit before adding the other files.

-What are some situations when branches would be helpful in keeping your history organized? How would branches help?

Branches would help whenever there is a interest in trying out new additions to the code while still having the option of keeping the original code in working condition for other additions.

-How do the diagrams help you visualize the branch structure?

Diagrams make it possible to easier get a understanding how different branches are connected and what changes has been made to the branches.

-What is the result of merging two branches together? Why do we represent it in the diagram the way we do?

Merging combines different parts of code into one project. Merging is usually done when a branched development is in a completed condition and ready to be merged in the full project. The diagram is a good way to map the changes in the code and get a clear view of how the code have been modified.

-What are the pros and cons of Gitâ€™s automatic merging vs. always doing merges manually?

Pro's is that the developer get more control of what is being merged and can make decisions on what to keep without as many surprises. Cons would be that it takes a bit more time to merge, where the developer needs to spend time understanding more code parts.